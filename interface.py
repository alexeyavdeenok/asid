# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QInputDialog, QMessageBox, QFileDialog
from playlist import *


class Ui_MainWindow(object):
    def __init__(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(40, 40, 681, 561))
        self.tabWidget.setObjectName("tabWidget")
        self.tabWidget.tabBar().setVisible(False)
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.listWidget = QtWidgets.QListWidget(self.tab)
        self.listWidget.setGeometry(QtCore.QRect(40, 40, 311, 321))
        self.listWidget.setObjectName("listWidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.tab)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(410, 60, 160, 271))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.pushButton_3 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.pushButton_3)
        self.tabWidget.addTab(self.tab, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.tab_3)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(420, 100, 160, 211))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.pushButton_10 = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.pushButton_10.setObjectName("pushButton_10")
        self.verticalLayout_3.addWidget(self.pushButton_10)
        self.pushButton_11 = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.pushButton_11.setObjectName("pushButton_11")
        self.verticalLayout_3.addWidget(self.pushButton_11)
        self.pushButton_9 = QtWidgets.QPushButton(self.verticalLayoutWidget_3)
        self.pushButton_9.setObjectName("pushButton_9")
        self.verticalLayout_3.addWidget(self.pushButton_9)
        self.listWidget_3 = QtWidgets.QListWidget(self.tab_3)
        self.listWidget_3.setGeometry(QtCore.QRect(40, 50, 291, 341))
        self.listWidget_3.setObjectName("listWidget_3")
        self.label_2 = QtWidgets.QLabel(self.tab_3)
        self.label_2.setGeometry(QtCore.QRect(40, 20, 291, 16))
        self.label_2.setObjectName("label_2")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.listWidget_2 = QtWidgets.QListWidget(self.tab_2)
        self.listWidget_2.setGeometry(QtCore.QRect(20, 50, 301, 351))
        self.listWidget_2.setObjectName("listWidget_2")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.tab_2)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(400, 60, 211, 331))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pushButton_5 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout_2.addWidget(self.pushButton_5)
        self.pushButton_8 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.pushButton_8.setObjectName("pushButton_8")
        self.verticalLayout_2.addWidget(self.pushButton_8)
        self.pushButton_6 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.pushButton_6.setObjectName("pushButton_6")
        self.verticalLayout_2.addWidget(self.pushButton_6)
        self.pushButton_4 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout_2.addWidget(self.pushButton_4)
        self.pushButton_7 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.pushButton_7.setObjectName("pushButton_7")
        self.verticalLayout_2.addWidget(self.pushButton_7)
        self.label = QtWidgets.QLabel(self.tab_2)
        self.label.setGeometry(QtCore.QRect(30, 10, 281, 31))
        self.label.setObjectName("label")
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.label_3 = QtWidgets.QLabel(self.tab_4)
        self.label_3.setGeometry(QtCore.QRect(160, 60, 311, 51))
        self.label_3.setObjectName("label_3")
        # self.horizontalSlider = QtWidgets.QSlider(self.tab_4)
        # self.horizontalSlider.setGeometry(QtCore.QRect(170, 130, 301, 41))
        # self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        # self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.tab_4)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(80, 220, 540, 80))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_13 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_13.setMinimumSize(QtCore.QSize(0, 50))
        self.pushButton_13.setObjectName("pushButton_13")
        self.horizontalLayout.addWidget(self.pushButton_13)
        self.pushButton_14 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_14.setMinimumSize(QtCore.QSize(0, 50))
        self.pushButton_14.setObjectName("pushButton_14")
        self.horizontalLayout.addWidget(self.pushButton_14)
        self.pushButton_12 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_12.setMinimumSize(QtCore.QSize(0, 50))
        self.pushButton_12.setObjectName("pushButton_12")
        self.horizontalLayout.addWidget(self.pushButton_12)
        self.pushButton_15 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_15.setGeometry(QtCore.QRect(270, 330, 171, 28))
        self.pushButton_15.setObjectName("pushButton_15")
        self.tabWidget.addTab(self.tab_4, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(3)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.tabWidget.setCurrentIndex(0)
        self.list_of_playlists = []
        self.listWidget.addItems(self.list_of_playlists)
        self.current_playlist = None
        self.choiced_track = None
        # 1 окно
        self.pushButton.clicked.connect(self.create_playlist)
        self.pushButton_3.clicked.connect(self.remove_playlist)
        self.pushButton_2.clicked.connect(self.to_playlist)

        # 2 окно
        self.pushButton_10.clicked.connect(self.set_listwidget3_value)
        self.pushButton_11.clicked.connect(self.remove_track)
        self.pushButton_9.clicked.connect(self.return_to_first_window)

        # 3 окно
        self.pushButton_5.clicked.connect(self.to_play_music)

        #4 окно
        self.pushButton_14.clicked.connect(self.play_pause)
        self.pushButton_12.clicked.connect(self.play_next_track)
        self.pushButton_13.clicked.connect(self.play_previous_track)
        self.pushButton_15.clicked.connect(self.to_choice_music)

    def show_error_message(self, text_mt):
        # Создаём всплывающее окно с сообщением об ошибке
        error_dialog = QMessageBox()
        error_dialog.setIcon(QMessageBox.Critical)  # Устанавливаем тип сообщения как "Ошибка"
        error_dialog.setWindowTitle('Ошибка')  # Заголовок окна
        error_dialog.setText('Произошла ошибка!')  # Основное сообщение
        error_dialog.setInformativeText(text_mt)  # Дополнительный текст
        error_dialog.setStandardButtons(QMessageBox.Ok)  # Кнопка закрытия

        # Отображаем окно
        error_dialog.exec_()

    def create_playlist(self):
        """Метод, вызываемый по нажатию кнопки"""
        user_input = self.get_user_input("Введите текст", "Введите название плейлиста:")
        if user_input in [i.name for i in self.list_of_playlists]:
            self.show_error_message('Плейлист с таким названием существует')
            self.current_playlist = None
            self.listWidget_3.clear()
            return False
        if user_input:  # Если введён текст, добавляем его в список
            new_playlist = PlayList(user_input)
            self.label_2.setText(f'Плейлист: {user_input}')
            self.tabWidget.setCurrentIndex(1)
            self.current_playlist = new_playlist
        elif not user_input:
            pass
        else:
            self.show_error_message('Нельзя создать плейлист без названия')

    def get_user_input(self, title, label):
        """Метод для открытия диалогового окна ввода текста"""
        text, ok = QInputDialog.getText(MainWindow, title, label)
        if ok and text:  # Проверяем, нажал ли пользователь OK и ввёл ли текст
            return text
        elif not ok:
            return False
        return None  # Возвращаем None, если ввод не был осуществлён

    def set_listwidget3_value(self):
        if self.add_to_playlist():
            self.listWidget_3.clear()
            for i in self.current_playlist:
                self.listWidget_3.addItem(str(i.data))

    def add_to_playlist(self):
        try:
            name, path = self.get_composition()
            if len(self.current_playlist) > 0:
                for i in self.current_playlist:
                    if i.data.path == path:
                        self.show_error_message('Выбранный файл добавлен в плейлист')
                        return False
                    elif i.data.title == name:
                        self.show_error_message('Трек с таким названием уже есть в плейлисте')
                        return False
            self.current_playlist.append(Composition(name, path))
            return True
        except:
            self.show_error_message('Трек не добавлен')

    def remove_track(self):
        selected_item = self.listWidget_3.currentItem()

        if selected_item:
            for i in self.current_playlist:
                if selected_item.text() == str(i.data):
                    self.current_playlist.remove(i.data)
                    break
            self.listWidget_3.clear()
            for i in self.current_playlist:
                self.listWidget_3.addItem(str(i.data))
        else:
            self.show_error_message('Трек не выбран')

    def get_composition(self):
        """Метод для добавления трека в плейлист."""

        # Открываем диалоговое окно для выбора файла с фильтром на mp3 файлы
        file_path, _ = QFileDialog.getOpenFileName(
            None,
            "Выберите MP3 файл",
            "",
            "Audio Files (*.mp3)"
        )

        # Проверяем, был ли выбран файл
        if file_path:
            # Получаем ввод пользователя для названия песни
            song_name = self.get_user_input("Введите название песни", "Введите название песни:")

            # Если введено название песни
            if song_name:
                # Возвращаем название песни и путь к файлу
                return song_name, file_path
            else:
                # Если название не введено, показываем сообщение об ошибке
                self.show_error_message('Нельзя добавить песню без названия')
                return None
        else:
            # Если файл не был выбран
            self.show_error_message('Вы должны выбрать MP3 файл для добавления')
            return None

    def return_to_first_window(self):
        self.list_of_playlists.append(self.current_playlist)
        self.current_playlist = None
        self.listWidget.clear()
        self.listWidget_3.clear()
        for i in self.list_of_playlists:
            self.listWidget.addItem(i.name)
        self.tabWidget.setCurrentIndex(0)

    def remove_playlist(self):
        selected_item = self.listWidget.currentItem()
        if selected_item:
            for i in self.list_of_playlists:
                if selected_item.text() == i.name:
                    self.list_of_playlists.remove(i)
                    break
            self.listWidget.clear()
            for i in self.list_of_playlists:
                self.listWidget.addItem(i.name)
        else:
            self.show_error_message('Плейлист не выбран')

    def to_playlist(self):
        selected_item = self.listWidget.currentItem()
        if selected_item:
            for i in self.list_of_playlists:
                if selected_item.text() == i.name:
                    self.current_playlist = i
                    self.label.setText(f'Плейлист: {self.current_playlist.name}')
                    self.tabWidget.setCurrentIndex(2)
                    self.listWidget_2.clear()
                    count = 0
                    for j in self.current_playlist:
                        count += 1
                        self.listWidget_2.addItem(str(count) + ') ' + str(j.data))
                    break
        else:
            self.show_error_message('Плейлист не выбран')

    def to_play_music(self):
        selected_item = self.listWidget_2.currentItem()

        if selected_item:
            for i in self.current_playlist:
                if selected_item.text()[selected_item.text().index(' ') + 1:] == str(i.data):
                    #self.choiced_track = i
                    self.current_playlist._current = i
                    self.tabWidget.setCurrentIndex(3)
                    self.label_3.setText(f'Текущий трек: {str(self.current_playlist._current.data)}')
                    break

        else:
            self.show_error_message('Трек не выбран')

    def play_pause(self):
        """Toggle between play and pause for the current track."""
        self.current_playlist.play_all()

    def play_next_track(self):
        self.current_playlist.next_track()
        self.label_3.setText(f'Текущий трек: {str(self.current_playlist.current)}')

    def play_previous_track(self):
        self.current_playlist.previous_track()
        self.label_3.setText(f'Текущий трек: {str(self.current_playlist.current)}')

    def to_choice_music(self):
        self.current_playlist.stop()
        self.label_3.clear()
        self.tabWidget.setCurrentIndex(2)

    def add_music(self):


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_2.setText(_translate("MainWindow", "Перейти к плейлисту"))
        self.pushButton.setText(_translate("MainWindow", "Создать плейлист"))
        self.pushButton_3.setText(_translate("MainWindow", "Удалить плейлист"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Tab 1"))
        self.pushButton_10.setText(_translate("MainWindow", "Добавить трек"))
        self.pushButton_11.setText(_translate("MainWindow", "Удалить трек"))
        self.pushButton_9.setText(_translate("MainWindow", "Завершить создание"))
        self.label_2.setText(_translate("MainWindow", "Плейлист:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Tab 2"))
        self.pushButton_5.setText(_translate("MainWindow", "Воспроизвести все"))
        self.pushButton_8.setText(_translate("MainWindow", "Добавить трек"))
        self.pushButton_6.setText(_translate("MainWindow", "Удалить трек"))
        self.pushButton_4.setText(_translate("MainWindow", "Поменять местами"))
        self.pushButton_7.setText(_translate("MainWindow", "Перейти к плейлистам"))
        self.label.setText(_translate("MainWindow", "Плейлист:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Tab 3"))
        self.label_3.setText(_translate("MainWindow", "Текущий трек:"))
        self.pushButton_13.setText(_translate("MainWindow", "Предыдущий трек"))
        self.pushButton_14.setText(_translate("MainWindow", "Воспроизведение/пауза"))
        self.pushButton_12.setText(_translate("MainWindow", "Следующий трек"))
        self.pushButton_15.setText(_translate("MainWindow", "Вернуться к плейлисту"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "Tab 4"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
